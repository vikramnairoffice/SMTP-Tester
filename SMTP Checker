{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNjLtMnbUOuPfq7aE3LkqIC"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"1kJyaIfKDFDX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736332445603,"user_tz":-330,"elapsed":11922,"user":{"displayName":"Aniket P","userId":"04197661795084254856"}},"outputId":"8a53504e-5295-45b3-f6c3-baecaae9f8ec"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: gradio==3.41.2 in /usr/local/lib/python3.10/dist-packages (3.41.2)\n","Requirement already satisfied: aiofiles<24.0,>=22.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (23.2.1)\n","Requirement already satisfied: altair<6.0,>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (5.5.0)\n","Requirement already satisfied: fastapi in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (0.115.6)\n","Requirement already satisfied: ffmpy in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (0.5.0)\n","Requirement already satisfied: gradio-client==0.5.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (0.5.0)\n","Requirement already satisfied: httpx in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (0.28.1)\n","Requirement already satisfied: huggingface-hub>=0.14.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (0.27.0)\n","Requirement already satisfied: importlib-resources<7.0,>=1.3 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (6.4.5)\n","Requirement already satisfied: jinja2<4.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (3.1.4)\n","Requirement already satisfied: markupsafe~=2.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (2.1.5)\n","Requirement already satisfied: matplotlib~=3.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (3.8.0)\n","Requirement already satisfied: numpy~=1.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (1.26.4)\n","Requirement already satisfied: orjson~=3.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (3.10.12)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (24.2)\n","Requirement already satisfied: pandas<3.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (2.2.2)\n","Requirement already satisfied: pillow<11.0,>=8.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (10.4.0)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,<3.0.0,>=1.7.4 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (2.10.3)\n","Requirement already satisfied: pydub in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (0.25.1)\n","Requirement already satisfied: python-multipart in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (0.0.20)\n","Requirement already satisfied: pyyaml<7.0,>=5.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (6.0.2)\n","Requirement already satisfied: requests~=2.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (2.32.3)\n","Requirement already satisfied: semantic-version~=2.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (2.10.0)\n","Requirement already satisfied: typing-extensions~=4.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (4.12.2)\n","Requirement already satisfied: uvicorn>=0.14.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (0.34.0)\n","Requirement already satisfied: websockets<12.0,>=10.0 in /usr/local/lib/python3.10/dist-packages (from gradio==3.41.2) (11.0.3)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from gradio-client==0.5.0->gradio==3.41.2) (2024.10.0)\n","Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.10/dist-packages (from altair<6.0,>=4.2.0->gradio==3.41.2) (4.23.0)\n","Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.10/dist-packages (from altair<6.0,>=4.2.0->gradio==3.41.2) (1.18.4)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.14.0->gradio==3.41.2) (3.16.1)\n","Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.14.0->gradio==3.41.2) (4.67.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->gradio==3.41.2) (1.3.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->gradio==3.41.2) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->gradio==3.41.2) (4.55.3)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->gradio==3.41.2) (1.4.7)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->gradio==3.41.2) (3.2.0)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib~=3.0->gradio==3.41.2) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio==3.41.2) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio==3.41.2) (2024.2)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,<3.0.0,>=1.7.4->gradio==3.41.2) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.27.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,<3.0.0,>=1.7.4->gradio==3.41.2) (2.27.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests~=2.0->gradio==3.41.2) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests~=2.0->gradio==3.41.2) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests~=2.0->gradio==3.41.2) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests~=2.0->gradio==3.41.2) (2024.12.14)\n","Requirement already satisfied: click>=7.0 in /usr/local/lib/python3.10/dist-packages (from uvicorn>=0.14.0->gradio==3.41.2) (8.1.7)\n","Requirement already satisfied: h11>=0.8 in /usr/local/lib/python3.10/dist-packages (from uvicorn>=0.14.0->gradio==3.41.2) (0.14.0)\n","Requirement already satisfied: starlette<0.42.0,>=0.40.0 in /usr/local/lib/python3.10/dist-packages (from fastapi->gradio==3.41.2) (0.41.3)\n","Requirement already satisfied: anyio in /usr/local/lib/python3.10/dist-packages (from httpx->gradio==3.41.2) (3.7.1)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx->gradio==3.41.2) (1.0.7)\n","Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6.0,>=4.2.0->gradio==3.41.2) (24.3.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6.0,>=4.2.0->gradio==3.41.2) (2024.10.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6.0,>=4.2.0->gradio==3.41.2) (0.35.1)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6.0,>=4.2.0->gradio==3.41.2) (0.22.3)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib~=3.0->gradio==3.41.2) (1.17.0)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio->httpx->gradio==3.41.2) (1.3.1)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio->httpx->gradio==3.41.2) (1.2.2)\n"]}],"source":["!pip install gradio==3.41.2"]},{"cell_type":"code","source":["import imaplib\n","import email\n","from email.header import decode_header\n","import os\n","import zipfile\n","import tempfile\n","import json\n","from tqdm import tqdm\n","import gradio as gr\n","import pandas as pd\n","import logging\n","import traceback\n","import sys  # Add this import\n","\n","# Constants\n","IMAP_SERVER = \"imap.gmail.com\"\n","PORT = 993\n","OUTPUT_DIR = \"exported_emails\"\n","INBOX_FOLDER = \"INBOX\"\n","SENT_FOLDER = '\"[Gmail]/Sent Mail\"'\n","\n","# Configure logging\n","logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', stream=sys.stdout)\n","\n","def clean_subject(subject):\n","    try:\n","        decoded, charset = decode_header(subject)[0]\n","        if isinstance(decoded, bytes):\n","            return decoded.decode(charset if charset else 'utf-8', errors='ignore')\n","        return decoded\n","    except Exception as e:\n","        logging.error(f\"Error decoding subject: {e}\")\n","        return \"No Subject\"\n","\n","def connect_to_gmail(email_user, app_password):\n","    try:\n","        mail = imaplib.IMAP4_SSL(IMAP_SERVER, PORT)\n","        mail.login(email_user, app_password)\n","        return mail\n","    except imaplib.IMAP4.error as e:\n","        if \"Invalid credentials\" in str(e):\n","            logging.error(f\"Failed to connect to {email_user}: Invalid app password\")\n","            return None\n","        else:\n","            logging.error(f\"Failed to connect to {email_user}: {e}\")\n","            return None\n","\n","def get_mail_count(mail, folder=INBOX_FOLDER):\n","    try:\n","        mail.select(folder)\n","        result, data = mail.search(None, 'ALL')\n","        if result == 'OK':\n","            return len(data[0].split())\n","        else:\n","            return 0\n","    except Exception as e:\n","        logging.error(f\"Failed to retrieve email count from {folder}: {e}\")\n","        return 0\n","\n","def fetch_email(mail, num):\n","    result, msg_data = mail.fetch(num, '(RFC822)')\n","    if result != 'OK':\n","        logging.error(f\"Failed to fetch email ID {num.decode()}.\")\n","        return None\n","    return email.message_from_bytes(msg_data[0][1])\n","\n","def fetch_all_emails(mail, folder=INBOX_FOLDER):\n","    try:\n","        mail.select(folder)\n","        result, data = mail.search(None, 'ALL')\n","        if result != 'OK':\n","            logging.error(f\"Failed to retrieve emails from {folder}.\")\n","            return []\n","\n","        email_ids = data[0].split()\n","        emails = []\n","\n","        for num in tqdm(email_ids, desc=f\"Processing {folder}\"):\n","            msg = fetch_email(mail, num)\n","            if msg is None:\n","                continue\n","\n","            subject = clean_subject(msg.get('Subject', 'No Subject'))\n","            date = msg.get('Date', 'Unknown Date')\n","            emails.append({\n","                'ID': num.decode(),\n","                'Subject': subject,\n","                'Date': date,\n","                'From': msg.get('From', ''),\n","                'To': msg.get('To', '')\n","            })\n","\n","        return emails\n","\n","    except Exception as e:\n","        logging.error(f\"An error occurred while fetching emails from {folder}: {e}\")\n","        return []\n","\n","def process_account(account, export_emails=False):\n","    email_user = account['email']\n","    app_password = account['app_password']\n","\n","    result = {\n","        'email': email_user,\n","        'inbox_count': 0,\n","        'sent_count': 0,\n","        'status': 'Success',\n","        'error': '',\n","        'emails': []\n","    }\n","\n","    try:\n","        mail = connect_to_gmail(email_user, app_password)\n","        if not mail:\n","            result['status'] = 'Failed to Connect'\n","            result['error'] = 'Authentication failed. Please check your email and app password.'\n","            return result\n","\n","        inbox_count = get_mail_count(mail, INBOX_FOLDER)\n","        sent_count = get_mail_count(mail, SENT_FOLDER)\n","\n","        result['inbox_count'] = inbox_count\n","        result['sent_count'] = sent_count\n","\n","        if export_emails:\n","            result['emails'] = fetch_all_emails(mail, INBOX_FOLDER)\n","\n","        mail.logout()\n","    except Exception as e:\n","        result['status'] = 'Error'\n","        result['error'] = f\"An error occurred: {str(e)}\"\n","        logging.error(f\"Error processing account {email_user}: {str(e)}\")\n","\n","    return result\n","\n","def parse_credentials(input_text):\n","    accounts = []\n","    lines = input_text.strip().split('\\n')\n","    for idx, line in enumerate(lines, start=1):\n","        if not line.strip():\n","            continue\n","        parts = line.split(',')\n","        if len(parts) != 2:\n","            raise ValueError(f\"Line {idx} is malformed. Expected format: email,app_password. Got: {line}\")\n","        email_addr = parts[0].strip()\n","        app_pwd = parts[1].strip()\n","        if not email_addr or not app_pwd:\n","            raise ValueError(f\"Line {idx} has empty email or app password. Email: '{email_addr}', Password: '{app_pwd}'\")\n","        if '@' not in email_addr:\n","            raise ValueError(f\"Line {idx} contains an invalid email address: {email_addr}\")\n","        accounts.append({'email': email_addr, 'app_password': app_pwd})\n","    return accounts\n","\n","def process_accounts_interface(credentials_text, export_emails):\n","    try:\n","        accounts = parse_credentials(credentials_text)\n","    except ValueError as ve:\n","        return {\"Error\": str(ve)}, None\n","\n","    results = []\n","    for account in accounts:\n","        res = process_account(account, export_emails)\n","        account_result = {\n","            'Email': res['email'],\n","            'Inbox Count': res['inbox_count'],\n","            'Sent Count': res['sent_count'],\n","            'Status': res['status'],\n","            'Error': res['error'],\n","            'app_password': account['app_password']  # Include app_password in the result\n","        }\n","        results.append(account_result)\n","\n","    return results, None if not export_emails else \"all_accounts_export.zip\"\n","\n","def export_email_to_txt(email_data):\n","    filename = f\"{email_data['ID']}_{email_data['Subject']}.txt\".replace('/', '_').replace('\\\\', '_')\n","    with open(filename, 'w', encoding='utf-8', errors='ignore') as f:\n","        f.write(f\"Subject: {email_data['Subject']}\\n\")\n","        f.write(f\"From: {email_data['From']}\\n\")\n","        f.write(f\"To: {email_data['To']}\\n\")\n","        f.write(f\"Date: {email_data['Date']}\\n\\n\")\n","        f.write(\"Email content goes here...\")  # Placeholder for actual email content\n","    return filename\n","\n","def export_single_account(email, app_password):\n","    account = {'email': email, 'app_password': app_password}\n","    result = process_account(account, export_emails=True)\n","    if result['emails']:\n","        zip_filename = f\"{email}_inbox.zip\"\n","        with zipfile.ZipFile(zip_filename, 'w') as zipf:\n","            for email_data in result['emails']:\n","                txt_filename = export_email_to_txt(email_data)\n","                zipf.write(txt_filename, os.path.basename(txt_filename))\n","                os.remove(txt_filename)  # Remove the individual txt file after adding to zip\n","        return zip_filename\n","    return None\n","\n","def export_all_accounts(df):\n","    all_zip_files = []\n","    for _, row in df.iterrows():\n","        zip_file = export_single_account(row['Email'], row['app_password'])\n","        if zip_file:\n","            all_zip_files.append(zip_file)\n","\n","    if all_zip_files:\n","        combined_zip = \"all_accounts_export.zip\"\n","        with zipfile.ZipFile(combined_zip, 'w') as combined_zip_file:\n","            for zip_file in all_zip_files:\n","                with zipfile.ZipFile(zip_file, 'r') as account_zip:\n","                    for file_info in account_zip.infolist():\n","                        with account_zip.open(file_info) as file:\n","                            combined_zip_file.writestr(f\"{os.path.basename(zip_file)}_{file_info.filename}\", file.read())\n","                os.remove(zip_file)\n","        return combined_zip\n","    return None\n","\n","def create_gradio_interface():\n","    with gr.Blocks() as demo:\n","        gr.Markdown(\"# Gmail IMAP Manager\")\n","        gr.Markdown(\n","            \"\"\"\n","            Enter Gmail accounts to retrieve email counts and optionally export emails.\n","\n","            **Input Format**:\n","            email1@gmail.com,app_password1\n","            email2@gmail.com,app_password2\n","            \"\"\"\n","        )\n","\n","        credentials_input = gr.Textbox(\n","            label=\"Gmail Credentials\",\n","            placeholder=\"email1@gmail.com,app_password1\\nemail2@gmail.com,app_password2\",\n","            lines=10\n","        )\n","\n","        with gr.Row():\n","            export_checkbox = gr.Checkbox(label=\"Export Emails to TXT\", value=False)\n","            run_button = gr.Button(\"Process Accounts\")\n","\n","        output_table = gr.Dataframe(\n","            headers=[\"Email\", \"Inbox Count\", \"Sent Count\", \"Status\", \"Error\", \"Export\"],\n","            label=\"Results\",\n","            interactive=False\n","        )\n","\n","        export_all_button = gr.Button(\"Export All Accounts\", visible=False)\n","        download_button = gr.File(label=\"Download Exported Emails (ZIP)\", visible=False)\n","\n","        def process_accounts(credentials_text, export):\n","            try:\n","                df, zip_path = process_accounts_interface(credentials_text, export)\n","\n","                if isinstance(df, dict) and 'Error' in df:\n","                    error_df = pd.DataFrame([{'Email': 'Error', 'Inbox Count': '', 'Sent Count': '', 'Status': 'Error', 'Error': df['Error'], 'Export': ''}])\n","                    return error_df, gr.update(visible=False), gr.update(visible=False)\n","\n","                df = pd.DataFrame(df)\n","\n","                # Add export buttons\n","                for i in range(len(df)):\n","                    df.at[i, 'Export'] = gr.Button(\"Export\")\n","                    df.at[i, 'Export'].click(\n","                        fn=export_individual_account,\n","                        inputs=[gr.Textbox(value=df.at[i, 'Email']), gr.Textbox(value=df.at[i, 'app_password'])],\n","                        outputs=[download_button]\n","                    )\n","\n","                if export and zip_path:\n","                    return df, gr.update(value=zip_path, visible=True), gr.update(visible=True)\n","                return df, gr.update(visible=False), gr.update(visible=export)\n","            except Exception as e:\n","                error_message = f\"An unexpected error occurred: {str(e)}\\n{traceback.format_exc()}\"\n","                logging.error(error_message)\n","                error_df = pd.DataFrame([{'Email': 'Error', 'Inbox Count': '', 'Sent Count': '', 'Status': 'Error', 'Error': error_message, 'Export': ''}])\n","                return error_df, gr.update(visible=False), gr.update(visible=False)\n","\n","        def export_individual_account(email, app_password):\n","            zip_file = export_single_account(email, app_password)\n","            if zip_file:\n","                return gr.update(value=zip_file, visible=True)\n","            return gr.update(visible=False)\n","\n","        run_button.click(\n","            fn=process_accounts,\n","            inputs=[credentials_input, export_checkbox],\n","            outputs=[output_table, download_button, export_all_button]\n","        )\n","\n","        export_all_button.click(\n","            fn=export_all_accounts,\n","            inputs=[output_table],\n","            outputs=[download_button]\n","        )\n","\n","    return demo\n","\n","# Launch the Gradio Interface\n","demo = create_gradio_interface()\n","demo.launch(share=True)\n","\n","# Add any additional imports or code after this line\n","import imaplib"],"metadata":{"id":"_xwQIvH8DirB","colab":{"base_uri":"https://localhost:8080/","height":356},"executionInfo":{"status":"error","timestamp":1736331986293,"user_tz":-330,"elapsed":891,"user":{"displayName":"Aniket P","userId":"04197661795084254856"}},"outputId":"b24d8ddb-d4bf-410e-99f1-85639ef10aef"},"execution_count":4,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"module 'gradio.components' has no attribute 'LoginButton'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-6ac73454f1b5>\u001b[0m in \u001b[0;36m<cell line: 298>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    296\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    297\u001b[0m \u001b[0;31m# Launch the Gradio Interface\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 298\u001b[0;31m \u001b[0mdemo\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcreate_gradio_interface\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    299\u001b[0m \u001b[0mdemo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlaunch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshare\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    300\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-4-6ac73454f1b5>\u001b[0m in \u001b[0;36mcreate_gradio_interface\u001b[0;34m()\u001b[0m\n\u001b[1;32m    216\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    217\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcreate_gradio_interface\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 218\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBlocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mdemo\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    219\u001b[0m         \u001b[0mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMarkdown\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"# Gmail IMAP Manager\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    220\u001b[0m         gr.Markdown(\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/gradio/blocks.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, exc_type, *args)\u001b[0m\n\u001b[1;32m   2204\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparent\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchildren\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchildren\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2205\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_config_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2206\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mApp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate_app\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2207\u001b[0m         self.progress_tracking = any(\n\u001b[1;32m   2208\u001b[0m             \u001b[0mblock_fn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtracks_progress\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mblock_fn\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/gradio/routes.py\u001b[0m in \u001b[0;36mcreate_app\u001b[0;34m(blocks, app_kwargs, auth_dependency, strict_cors, ssr_mode)\u001b[0m\n\u001b[1;32m    493\u001b[0m         \u001b[0;31m# It allows users to \"Sign in with HuggingFace\". Otherwise, add the default\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    494\u001b[0m         \u001b[0;31m# logout route.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 495\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0mapp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblocks\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mapp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpects_oauth\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    496\u001b[0m             \u001b[0mattach_oauth\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    497\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/gradio/blocks.py\u001b[0m in \u001b[0;36mexpects_oauth\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1373\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mexpects_oauth\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1374\u001b[0m         \u001b[0;34m\"\"\"Return whether the app expects user to authenticate via OAuth.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1375\u001b[0;31m         return any(\n\u001b[0m\u001b[1;32m   1376\u001b[0m             \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblock\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcomponents\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLoginButton\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mblock\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1377\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/gradio/blocks.py\u001b[0m in \u001b[0;36m<genexpr>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   1374\u001b[0m         \u001b[0;34m\"\"\"Return whether the app expects user to authenticate via OAuth.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1375\u001b[0m         return any(\n\u001b[0;32m-> 1376\u001b[0;31m             \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblock\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcomponents\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLoginButton\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mblock\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1377\u001b[0m         )\n\u001b[1;32m   1378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: module 'gradio.components' has no attribute 'LoginButton'"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"St4IdJ79G6vR"}},{"cell_type":"markdown","source":["# Fixed Code"],"metadata":{"id":"2kqqkXrsG_ld"}},{"cell_type":"code","source":["import imaplib\n","import email\n","from email.header import decode_header\n","import os\n","import zipfile\n","import tempfile\n","import json\n","from tqdm import tqdm\n","import gradio as gr\n","import pandas as pd\n","import logging\n","import traceback\n","import sys\n","\n","# Constants\n","IMAP_SERVER = \"imap.gmail.com\"\n","PORT = 993\n","OUTPUT_DIR = \"exported_emails\"\n","INBOX_FOLDER = \"INBOX\"\n","SENT_FOLDER = '\"[Gmail]/Sent Mail\"'\n","\n","# Configure logging\n","logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', stream=sys.stdout)\n","\n","def clean_subject(subject):\n","    try:\n","        decoded, charset = decode_header(subject)[0]\n","        if isinstance(decoded, bytes):\n","            return decoded.decode(charset if charset else 'utf-8', errors='ignore')\n","        return decoded\n","    except Exception as e:\n","        logging.error(f\"Error decoding subject: {e}\")\n","        return \"No Subject\"\n","\n","def connect_to_gmail(email_user, app_password):\n","    try:\n","        mail = imaplib.IMAP4_SSL(IMAP_SERVER, PORT)\n","        mail.login(email_user, app_password)\n","        return mail\n","    except imaplib.IMAP4.error as e:\n","        if \"Invalid credentials\" in str(e):\n","            logging.error(f\"Failed to connect to {email_user}: Invalid app password\")\n","            return None\n","        else:\n","            logging.error(f\"Failed to connect to {email_user}: {e}\")\n","            return None\n","\n","def get_mail_count(mail, folder=INBOX_FOLDER):\n","    try:\n","        mail.select(folder)\n","        result, data = mail.search(None, 'ALL')\n","        if result == 'OK':\n","            return len(data[0].split())\n","        else:\n","            return 0\n","    except Exception as e:\n","        logging.error(f\"Failed to retrieve email count from {folder}: {e}\")\n","        return 0\n","\n","def fetch_email(mail, num):\n","    result, msg_data = mail.fetch(num, '(RFC822)')\n","    if result != 'OK':\n","        logging.error(f\"Failed to fetch email ID {num.decode()}.\")\n","        return None\n","    return email.message_from_bytes(msg_data[0][1])\n","\n","def fetch_all_emails(mail, folder=INBOX_FOLDER):\n","    try:\n","        mail.select(folder)\n","        result, data = mail.search(None, 'ALL')\n","        if result != 'OK':\n","            logging.error(f\"Failed to retrieve emails from {folder}.\")\n","            return []\n","\n","        email_ids = data[0].split()\n","        emails = []\n","\n","        for num in tqdm(email_ids, desc=f\"Processing {folder}\"):\n","            msg = fetch_email(mail, num)\n","            if msg is None:\n","                continue\n","\n","            subject = clean_subject(msg.get('Subject', 'No Subject'))\n","            date = msg.get('Date', 'Unknown Date')\n","            emails.append({\n","                'ID': num.decode(),\n","                'Subject': subject,\n","                'Date': date,\n","                'From': msg.get('From', ''),\n","                'To': msg.get('To', '')\n","            })\n","\n","        return emails\n","\n","    except Exception as e:\n","        logging.error(f\"An error occurred while fetching emails from {folder}: {e}\")\n","        return []\n","\n","def process_account(account, export_emails=False):\n","    email_user = account['email']\n","    app_password = account['app_password']\n","\n","    result = {\n","        'email': email_user,\n","        'inbox_count': 0,\n","        'sent_count': 0,\n","        'status': 'Success',\n","        'error': '',\n","        'emails': []\n","    }\n","\n","    try:\n","        mail = connect_to_gmail(email_user, app_password)\n","        if not mail:\n","            result['status'] = 'Failed to Connect'\n","            result['error'] = 'Authentication failed. Please check your email and app password.'\n","            return result\n","\n","        inbox_count = get_mail_count(mail, INBOX_FOLDER)\n","        sent_count = get_mail_count(mail, SENT_FOLDER)\n","\n","        result['inbox_count'] = inbox_count\n","        result['sent_count'] = sent_count\n","\n","        if export_emails:\n","            result['emails'] = fetch_all_emails(mail, INBOX_FOLDER)\n","\n","        mail.logout()\n","    except Exception as e:\n","        result['status'] = 'Error'\n","        result['error'] = f\"An error occurred: {str(e)}\"\n","        logging.error(f\"Error processing account {email_user}: {str(e)}\")\n","\n","    return result\n","\n","def parse_credentials(input_text):\n","    accounts = []\n","    lines = input_text.strip().split('\\n')\n","    for idx, line in enumerate(lines, start=1):\n","        if not line.strip():\n","            continue\n","        parts = line.split(',')\n","        if len(parts) != 2:\n","            raise ValueError(f\"Line {idx} is malformed. Expected format: email,app_password. Got: {line}\")\n","        email_addr = parts[0].strip()\n","        app_pwd = parts[1].strip()\n","        if not email_addr or not app_pwd:\n","            raise ValueError(f\"Line {idx} has empty email or app password. Email: '{email_addr}', Password: '{app_pwd}'\")\n","        if '@' not in email_addr:\n","            raise ValueError(f\"Line {idx} contains an invalid email address: {email_addr}\")\n","        accounts.append({'email': email_addr, 'app_password': app_pwd})\n","    return accounts\n","\n","def process_accounts_interface(credentials_text, export_emails):\n","    try:\n","        accounts = parse_credentials(credentials_text)\n","    except ValueError as ve:\n","        return {\"Error\": str(ve)}, None\n","\n","    results = []\n","    for account in accounts:\n","        res = process_account(account, export_emails)\n","        account_result = {\n","            'Email': res['email'],\n","            'Inbox Count': res['inbox_count'],\n","            'Sent Count': res['sent_count'],\n","            'Status': res['status'],\n","            'Error': res['error'],\n","            'app_password': account['app_password']  # Include app_password in the result\n","        }\n","        results.append(account_result)\n","\n","    return results, None if not export_emails else \"all_accounts_export.zip\"\n","\n","def export_email_to_txt(email_data):\n","    filename = f\"{email_data['ID']}_{email_data['Subject']}.txt\".replace('/', '_').replace('\\\\', '_')\n","    with open(filename, 'w', encoding='utf-8', errors='ignore') as f:\n","        f.write(f\"Subject: {email_data['Subject']}\\n\")\n","        f.write(f\"From: {email_data['From']}\\n\")\n","        f.write(f\"To: {email_data['To']}\\n\")\n","        f.write(f\"Date: {email_data['Date']}\\n\\n\")\n","        f.write(\"Email content goes here...\")  # Placeholder for actual email content\n","    return filename\n","\n","def export_single_account(email, app_password):\n","    account = {'email': email, 'app_password': app_password}\n","    result = process_account(account, export_emails=True)\n","    if result['emails']:\n","        zip_filename = f\"{email}_inbox.zip\"\n","        with zipfile.ZipFile(zip_filename, 'w') as zipf:\n","            for email_data in result['emails']:\n","                txt_filename = export_email_to_txt(email_data)\n","                zipf.write(txt_filename, os.path.basename(txt_filename))\n","                os.remove(txt_filename)  # Remove the individual txt file after adding to zip\n","        return zip_filename\n","    return None\n","\n","def export_all_accounts(df):\n","    all_zip_files = []\n","    for _, row in df.iterrows():\n","        zip_file = export_single_account(row['Email'], row['app_password'])\n","        if zip_file:\n","            all_zip_files.append(zip_file)\n","\n","    if all_zip_files:\n","        combined_zip = \"all_accounts_export.zip\"\n","        with zipfile.ZipFile(combined_zip, 'w') as combined_zip_file:\n","            for zip_file in all_zip_files:\n","                with zipfile.ZipFile(zip_file, 'r') as account_zip:\n","                    for file_info in account_zip.infolist():\n","                        with account_zip.open(file_info) as file:\n","                            combined_zip_file.writestr(f\"{os.path.basename(zip_file)}_{file_info.filename}\", file.read())\n","                os.remove(zip_file)\n","        return combined_zip\n","    return None\n","\n","def create_gradio_interface():\n","    with gr.Blocks() as demo:\n","        gr.Markdown(\"# Gmail IMAP Manager\")\n","        gr.Markdown(\n","            \"\"\"\n","            Enter Gmail accounts to retrieve email counts and optionally export emails.\n","\n","            **Input Format**:\n","            email1@gmail.com,app_password1\n","            email2@gmail.com,app_password2\n","            \"\"\"\n","        )\n","\n","        credentials_input = gr.Textbox(\n","            label=\"Gmail Credentials\",\n","            placeholder=\"email1@gmail.com,app_password1\\nemail2@gmail.com,app_password2\",\n","            lines=10\n","        )\n","\n","        with gr.Row():\n","            export_checkbox = gr.Checkbox(label=\"Export Emails to TXT\", value=False)\n","            run_button = gr.Button(\"Process Accounts\")\n","\n","        output_table = gr.Dataframe(\n","            headers=[\"Email\", \"Inbox Count\", \"Sent Count\", \"Status\", \"Error\", \"Export\"],\n","            label=\"Results\",\n","            interactive=False\n","        )\n","\n","        export_all_button = gr.Button(\"Export All Accounts\", visible=False)\n","        download_button = gr.File(label=\"Download Exported Emails (ZIP)\", visible=False)\n","\n","        def process_accounts(credentials_text, export):\n","            try:\n","                df, zip_path = process_accounts_interface(credentials_text, export)\n","\n","                if isinstance(df, dict) and 'Error' in df:\n","                    error_df = pd.DataFrame([{'Email': 'Error', 'Inbox Count': '', 'Sent Count': '', 'Status': 'Error', 'Error': df['Error'], 'Export': ''}])\n","                    return error_df, gr.update(visible=False), gr.update(visible=False)\n","\n","                df = pd.DataFrame(df)\n","\n","                # Add export buttons\n","                df['Export'] = ['Export' for _ in range(len(df))]\n","\n","                if export and zip_path:\n","                    return df, gr.update(value=zip_path, visible=True), gr.update(visible=True)\n","                return df, gr.update(visible=False), gr.update(visible=export)\n","            except Exception as e:\n","                error_message = f\"An unexpected error occurred: {str(e)}\\n{traceback.format_exc()}\"\n","                logging.error(error_message)\n","                error_df = pd.DataFrame([{'Email': 'Error', 'Inbox Count': '', 'Sent Count': '', 'Status': 'Error', 'Error': error_message, 'Export': ''}])\n","                return error_df, gr.update(visible=False), gr.update(visible=False)\n","\n","        def export_individual_account(evt: gr.SelectData):\n","            email = output_table.value.iloc[evt.index[0]]['Email']\n","            app_password = output_table.value.iloc[evt.index[0]]['app_password']\n","            zip_file = export_single_account(email, app_password)\n","            if zip_file:\n","                return gr.update(value=zip_file, visible=True)\n","            return gr.update(visible=False)\n","\n","        run_button.click(\n","            fn=process_accounts,\n","            inputs=[credentials_input, export_checkbox],\n","            outputs=[output_table, download_button, export_all_button]\n","        )\n","\n","        export_all_button.click(\n","            fn=export_all_accounts,\n","            inputs=[output_table],\n","            outputs=[download_button]\n","        )\n","\n","        output_table.select(\n","            fn=export_individual_account,\n","            outputs=[download_button]\n","        )\n","\n","    return demo\n","\n","# Launch the Gradio Interface\n","demo = create_gradio_interface()\n","demo.launch(share=True)\n","\n","# Add any additional imports or code after this line\n","import imaplib"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":625},"id":"dmvTsxYrFyT6","executionInfo":{"status":"ok","timestamp":1736332451347,"user_tz":-330,"elapsed":5180,"user":{"displayName":"Aniket P","userId":"04197661795084254856"}},"outputId":"0ff56267-0983-4f63-ddd5-057a7a108ce9"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["IMPORTANT: You are using gradio version 3.41.2, however version 4.44.1 is available, please upgrade.\n","--------\n","Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n","Running on public URL: https://74a2c87d7680908da6.gradio.live\n","\n","This share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from Terminal to deploy to Spaces (https://huggingface.co/spaces)\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<div><iframe src=\"https://74a2c87d7680908da6.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"]},"metadata":{}}]}]}